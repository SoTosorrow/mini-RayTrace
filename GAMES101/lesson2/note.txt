How to compile:
1:mkdir build 
2:cd build
3:cmake ..
4:make		# compile the program
4:./Transformation	# run the program

///////
CMakeLists.txt file:
cmake_minimum_required (VERSION 2.8.11)		# set the minimum version of camke required to run this profile
project (Transformation)			# set the project name

find_package(Eigen3 REQUIRED)			# using find_package to include external dependent package
include_directories(EIGEN3_INCLUDE_DIR)		#

add_executable (Transformation main.cpp)	# add the executable

///////
2021-3-10:
lesson2:
usually used Unit Vector to represent directions
default think the vertor is the column vector:   
	A = (x)
	    (y)
	Tranpose(A) = (x,y), ||A||=sqrt(x*x + y*y)

Dot(scalar) product: can get the included angle of two vector
	VectorA .Dot VectorB = ||A||*||B||*cos(thet)
	cos(thet) = (VectorA .Dot VectorB) / (||A||*||B||)
	(for unit vectors): cos(thet) = unitVectorA .Dot unitVectorB

	(2D) VectorA .Dot VectorB = xa*xb + ya*yb
	(3D) VectorA .Dot VectorB = xa*xb + ya*yb + za*zb
Dot Product in Graphics:
	Find angle between two vectors
	(e.g. cosine of angle between light source and sufface)
	Finding projection of one vector on another
	Measure how close two directions are
	Decompose a vector
	Determine forward/backward
		dot product > 0 : forward
		dot product < 0 : backward
		dot product = 0 : two vectors vertical
		two directions dot close to 1: is close (1 is the same direction)
		two directions dot close to -1: is un-close (-1 is the polar direction)

Cross(vector) product
	Cross product is orthogonal to two initial vectors
	Direction determined by right-hand rule
	Useful in constructing coordinate systems
	(VectorA Cross VectorB) is direction polar with (VectorB Cross VectorA)
	
	VectorA Cross VectorB = -VectorB Cross VectorA
	VectorA Cross VectorA = VectorZero
	||VectorA Cross VectorB|| = ||VectorA||*||VectorB||*sin(phi)

	if x cross y = +z :right-hand system
	if x cross y = -z :left-hand system

	VectorA Cross VectorB = (ya*zb-yb*za)
				(za*xb-xa*zb)
				(xa*yb-ya*xb)
	using matrix show vectorA: (xa ya za) = (0 -za ya)
						(za 0 -xa)
						(-ya xa 0)
Cross Product in Graphics:
	Determine left/right
	Determine inside/outside  yesyesyes!!!

Orthonormal bases and coordinate frames


Matrices
	Matrix is Array of numbers(m*n = m rows, ncolumns)
	(number of)columns in A must = rows in B
		(M * N)(N * P) = (M * P)

	Matrix-Vector Muliplication
		Treat vector as a column matrix(m * 1)
		Key for transforming points
	Officail spoiler:2D reflection about y-axis:
		(-1 0) (x)   (-x)
		( 0 1) (y) = ( y)

	Transpose(AB) = Transpose(B) * Transpose(A)

	I(3*3) = (1 0 0)    # unit martix
		 (0 1 0)
		 (0 0 1)
	A*inverse(A) = inverse(A)*A = I
	inverse(A*B) = inverse(B)*inverse(A)



///////////////
2021-3-12:
lesson3:
	2D Transformations
		Scale	x'=s*x	 y'=s*y
			[x']   [s1 0][x]
			[y'] = [0 s2][y]

		Shear	Hroizontal shear
			[x']   [1 a][x]
			[y'] = [0 1][y]

		Rotate (about the origin(0,0), CCW by default) 
			CCW:counterclockwise CW:clockwise
			Rotation Matrix:
			R(thet) = [cos -sin]
				  [sin  cos]
			(x')   (cos -sin)(x)
			(y') = (sin  cos)(y)
	
	Why homogeneous coordinate
		Translation cannot be represented in matrix form
		[x']   [a b][x]   [tx]
		[y'] = [c d][y] + [ty]
		So translation is NOT linear transform
			Is there a unified way to represent all transformations?
	Solution:Homogeneous Coordinates
		Add a third coordinate (w-coordinate):
		2D point = transpose(x, y, 1)
		2D Vector = transpose(x, y, 0)

		Matrix representation of translations:
		(x')   (1 0 tx)   (x)   (x+tx)
		(y') = (0 1 ty) * (y) = (y+tx)
		(w')   (0 0  1)   (1)   ( 1  )
	In homogeneous coordinates
		(x)                 (x/w)
		(y) is the 2D point (y/w), w != 0
		(w)                 ( 1 )
	Valid operation if w-coordinate of result is 1 or 0
		vector + vector = vector
		point - point = vector
		point + vector = point
		point + point = midpoint of two points

	Affine Transformations
	Affine map = linear map + translation
		(x')   (a b)(x)   (tx)
		(y') = (c d)(y) + (ty)
	Using homogeneous coordinates:
		(x')   (a b tx)   (x)
		(y') = (c d ty) * (y)
		(1 )   (0 0  1)   (1)
		
		Scale(sx,sy) = (sx  0  0)
			       (0  sy  0)
			       (0   0  1)
		
		R(thet) = (cos -sin  0)
			  (sin  cos  0)
			  ( 0    0   1)

		Translation(tx,ty) = 	(1 0 tx)
					(0 1 ty)
					(0 0  1)
	Inverse Transform
		M^-1 is the inverse of transform M in both a matrix and geometric sense
			* Inverse(matrix)
	Composing Transform
		Transform Ordering Matters!
		Matrix multiplication is not commutative
		Note that matrices are applied right to left
	Decomposing Complex Transform
		Rotate about the custom position c:
			Transform center to origin then Rotate finally Transform back
			T(c)*R(thet)*T(-c)  // operate from right to left


	3D Transforms
		Use homogeneous coordinates again:
		3D point = transpose(x, y, z, 1)
		3D Vector = transpose(x, y, z, 0)
		
		In general, (x,y,z,w)(w != 0) is the 3D point: (x/w, y/w, z/w)
	
	Use 4*4 matrices for affine transformations:
		(x')   (a b c tx) (x)
		(y')   (d e f ty) (y)
		(z') = (g h i tz)*(z)
		(1 )   (0 0 0  1) (1)
	as the affine :first linear transform then translation
	
			



////////////
assignment0:
1, test the matrix operation
2, complete the assignment0
3, use the argv to input custom degree parameter




